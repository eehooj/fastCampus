* TDD
Test Driven Development
= 테스트 주도 개발
= 목표 주도 개발
= 사용자 중심 개발
= 인터페이스 중심 개발

- 올바르게 작동하는 깔끔한 코드 작성 목표
- 올바르게 작동하는 코드를 만들고, 깔끔한 코드를 만들기 위해 리팩토링을 함
- 리팩토링은 작동하는 것은 그대로 두고 내부 구현만 바꿈
- 때문에 올바르게 작동하고 있다는 것을 보여주는 테스트 코드를 작성
- 테스트 코드는 가장 먼저 만들자! = TDD
- Red -> Green -> Refactoring 이라는 세가지 단계를 거침
- Red : 실패하는 코드 : 우선 테스트 코드를 작성하면 무조건 실패하게 되어 있음
- Green : 테스트가 성공할 수 있도록 메소드를 구현
- Refactoring : 성공한 코드를 가지고 좀 더 깔끔하게 재 구현


* Rest Api
- 다양한 환경을 지원해야함 => 서로 다른 front-end => 하나의 백엔드
- REpresentational State Transfer = Resource를 처리하는 방식
- Resource에는 CRUD가 있음
- Create/Post, Read/Get, Update/put/patch, Delete/Delete
- Resource를 지정할 때 URI(Uniform Resource Identifier) 식별자를 사용함
- 또는 URL(Uniform Resource Locator)라고 불리우는 지시자를 사용함
- Resource는 Collection(여러 개)과 Member(그 안에 속한 개별적)로 나뉨
- Collection : Read(List 목록을 가져오고), Create (새로운 리소스를 만듦)
- Member : Read(Detail 각 목록의 상세정보), Update(각 개별 리소스를 수정), Delete(각 리소스를 삭제) 
- 결과를 보내거나 얻을 때 JSON(JavaScript Object Notation)이라는 포맷을 사용
- JSON은 자바스크립트에서 오브젝트를 표현하는 것과 마찬가지의 방법을 여러 언어, 환경에서 표준에서 사용


* 의존성 주입(dependency Injection)
- 의존성이란 의존관계를 의미
- 의존 관계란 둘 이상의 객체가 서로 협력하는 것
ex) A는 B에 의존하여 작업을 함 => A는 B를 사용 => B의 변화가 A에 영향을 줌
   => B가 변하기 때문에 효과적으로 관리를 해야함
ex) controller는 repository에 의존 => controller에 repository를 연결
- controller에서 repository 생성 => 객체를 생성하는책임을 controller가 가짐
  => 이렇게 만들어진 repository를 우리가 가지고 있는 멤버변수에 할당
  => 하지만 객체를 만들고 연결을 해주는 것을 다른 곳에서 해주면 어떨까?
- Spring IoC Container 가 해줌
- DI는 객체간 의존관계를 스프링 IoC를 사용하여 관리해줌
- 스프링은 @Component와 @Autowired를 사용하여 직접 관리 해줌
- @Autowired : 컨트롤러가 만들어 질떄 스프링이 자동으로 객체를 주입
- 의존성 주입을 통해 주입하면 좋은 점
  => 우리가 사용해야하는 객체를 다양하게 변경할 수 있음
- 같은 방식으로 작동하는 여러 객체를 다루려면 어떻게 해야할까?
  => 만든 repository를 인터페이스로 변경을 하고
  => 그 안에 코딩 부분을 실제 구현부로 만들어주자
  => 만든 repository를 구체적인 구현체로 바꾸고 거기서 사용할 인터페이스들을 별도로 분리하자


* Layered Archtecture
- 우리는 지금 UI Layer와 Domain Layer를 사용하고 있음
- UI Layer : controller / Domain Layer : Restaurant와 repository가 있음
- interfaces라는 패키지에는 controller가, domaoin 패키지에는 도메인 모델과 repository을 넣었음
- 원래 Layered Archtecture에는 interfaces와 domain 사이에 Application Layer가 있음
- 이번 강의에서 Application Layer를 구성할거임
- application 패키지를 만들고 필요한 것을 확인하기 위해 Menu Item이라는 도메인 모델을 만들 예정
- application layer에는 RestaurantService라는 객체가 들어가고, 복잡한 로직들을 모아서 처리할 예정

- service를 만들기 전에는 controller가 웹에 대한 처리만 해야하는데 repository 두 개가 얽혀 있어
  그 것에 대한 처리도 해야했음
- 지금은 service에서 repository에 대한 모든 것을 처리함
- service는 더이상 웹이 어떻게 처리되는지 알 필요가 없고
- 단순히 repository들을 통해 어떤 결과를 보여줘야 하는지에 대한 본질적인 작업에 집중할 수 있음

- test 코드를 통해 믿을 수 있는 service 기능을 구현함
- 여전히 SpyBean으로 복잡하게 test코드에 여러 객체를 주입하는데, 가짜 객체를 이용하여 간단하게 할 예정


* 가짜 객체(Mock Object)
- 테스트 코드에 복잡하게 여러 객체를 주입하는 것에 대한 대안책
- 스프링은 Mokito라는 프레임워크를 사용
- 스프링은 POJO(Plain Old Java Object)를 사용하여 권장함
- 그래서 Mokito같은 프레임워크를 제공

- test하려는 대상 외의 것들을 가짜로 대체
  => @MockBean/@Mock 사용하여 가짜 객체로 대체
  => 실제로 이 서비스가 어떻게 되어 있는지와 상관없이 컨트롤러테스트가 만들어준 가짜를 가지고 처리함

- @MockBean : 스프링에서 테스트할 때 사용
- @Mock : 자바 객체만 이용하여 테스트(Mokito의 기능) // 가짜 객체를 만들어 사용하는 방법
   => MockitoAnnotations.initMocks(this);를 해줘야함
   => Mockito 어노테이션이 선언된 변수들을 초기화하고 객체를 만듦(연결해줌..?)
   => 이 과정이 없다면 NullPointException이 발생


* JPA
- 지금까지 만든 도메인객체는 모두 메모리에서 관리됨 => 프로그램을 종료하면 메모리가 휘발됨
- 그래서 종료되더라도 데이터가 남아있는 영속화작업(persistence)이 필요
- 자바는 영속화에 대한 표준을 가지고 있음 => JPA(Java Persistence API)
- JPA에서 가장 유명한 라이브러리는 Hibernate임
- @Entity
  => identofier로 구분되는 객체
  => 관계형 데이터베이스에서도 각 데이터를 구분하는데 emtity라는 단위를 사용
- @GeneratedValue
  => @id와 함께 사용
  => 자동으로 id를 할당해 줌


* Front-end
- Web하면 HTML, CSS, JavaScript 흔히 이 세가지를 언급함
- Node.js라는 서버사이드스크립트 또는 범용 스크립트 런타임을 사용
  => Node.js에는 다양한 에코 시스템이 있어서 프론트, 백 모두 사용할 수 있음
  => 특히 Webpack을 이용하여 모든 프론트 처리가 가능하도록 할거임
- CORS(Cross-Origin Resource Sharing)을 조심해야함
  => 프론트 작업시 별도의 웹서버를 띄울 예정
  => 그러면 백엔드 서버와 다른 주소로 인식하기 때문에 보안상 이슈로 접근이 안됨
  => 스프링에서 @CrossOrigin이라는 어노테이션을 사용하여 처리할 것
- node.js 설치 주소 : https://nodejs.org/ko/
  => npm init
- webpack 주소 : https://webpack.js.org/concepts/
  => CONFIGURATION -> Dev Server
  => npm install --save-dev webpack webpack-cli webpack-dev-server


* Lombok
- Annotation Processor를 이용하여 자동으로 코드를 만들어줌
- @Getter, @Setter, @Builder 등
- 코드의 양이 줄어들어서 훨씬 깔끔해 보임
- 코드를 작성할 때 실수로 발생할 수 있는 오류를 줄일 수 있음
- class에 어노테이션을 붙이면 필요하지 않은 부분까지 생성된다는 단점이 있음


* Validation(유효성 검사)
- 사용자들이 입력하는 데이터가 유효한지 검증하는 것
- @NotNull, @NotEmpty, @Size(max=10) 등
- @Valid를 사용하면 스프링이 알아서 검사하여 유효성에 맞지 않으면 에러를 발생시켜줌


* Not Found
- 우리가 uri로 접근을 하는데 실제 존재하지 않는 uri일 수 있음
- HTTP Status 404 에러를 처리해야함
- 실제로 예외를 던져주고 그 예외를 받아서 처리하는 @ControllerAdvice를 사용하여 처리
- @ControllerAdvice 
   => 별도의 속성값이 없이 사용하면 모든 패키지 전역에 있는 컨트롤러의 예외를 잡아 처리
- @ExceptionHandler(RestaurantNotFoundException.class)
   => @Controller, @RestController가 적용된 Bean내에서 발생하는 예외를 잡아 하나의 메서드에서 처리해주는 기능




